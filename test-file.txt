import type { ParserOptions } from "@babel/parser";
import { parse } from "@babel/parser";
import MagicString from "magic-string";
import path2 from "path";
import type { Plugin } from "vite";

interface ContentMetadata {
  text?: string;
  placeholder?: string;
  className?: string;
}

// Custom type for JSX nodes
type JSXNodeWithLocation = {
  type: string;
  loc?: {
    start?: {
      line: number;
      column: number;
    };
  };
  name?: {
    type: string;
    name?: string;
    end?: number;
    object?: { name: string };
    property?: { name: string };
  };
  attributes?: Array<{
    type: string;
    name: { name: string };
    value?: {
      type: string;
      value?: string;
      expression?: { type: string; value: string };
    };
  }>;
  children?: Array<any>;
};

const validExtensions = new Set([".tsx", ".jsx", ".ts", ".js"]);

function shouldTagElement(elementName: string): boolean {
  return true; // Default to tagging all elements
}

export function componentTagger(): Plugin {
  const cwd = process.cwd();
  const stats = {
    totalFiles: 0,
    processedFiles: 0,
    totalElements: 0,
  };

  return {
    name: "vite-plugin-component-tagger",
    enforce: "pre",
    async transform(code: string, id: string) {
      if (
        !validExtensions.has(path2.extname(id)) ||
        id.includes("node_modules")
      ) {
        return null;
      }

      stats.totalFiles++;
      const relativePath = path2.relative(cwd, id);

      try {
        const parserOptions: ParserOptions = {
          sourceType: "module" as const,
          plugins: ["jsx", "typescript"],
        };

        const ast = parse(code, parserOptions);
        const magicString = new MagicString(code);
        let changedElementsCount = 0;
        let currentElement: JSXNodeWithLocation | null = null;

        const { walk } = await import("estree-walker");
        walk(ast as any, {
          enter(node: any) {
            const jsxNode = node as JSXNodeWithLocation;

            if (jsxNode.type === "JSXElement") {
              currentElement = jsxNode;
            }

            if (jsxNode.type === "JSXOpeningElement") {
              let elementName = "";

              if (jsxNode.name?.type === "JSXIdentifier") {
                elementName = jsxNode.name.name || "";
              } else if (jsxNode.name?.type === "JSXMemberExpression") {
                const memberExpr = jsxNode.name;
                elementName = `${memberExpr.object?.name || ""}.${memberExpr.property?.name || ""}`;
              } else {
                return;
              }

              const attributes = (
                jsxNode.attributes || []
              ).reduce<ContentMetadata>((acc, attr) => {
                if (attr.type === "JSXAttribute") {
                  if (attr.value?.type === "StringLiteral") {
                    acc[attr.name.name as keyof ContentMetadata] =
                      attr.value.value;
                  } else if (
                    attr.value?.type === "JSXExpressionContainer" &&
                    attr.value.expression?.type === "StringLiteral"
                  ) {
                    acc[attr.name.name as keyof ContentMetadata] =
                      attr.value.expression.value;
                  }
                }
                return acc;
              }, {});

              let textContent = "";
              if (currentElement?.children) {
                textContent = currentElement.children
                  .map((child: any) => {
                    if (child.type === "JSXText") {
                      return child.value.trim();
                    } else if (child.type === "JSXExpressionContainer") {
                      if (child.expression.type === "StringLiteral") {
                        return child.expression.value;
                      }
                    }
                    return "";
                  })
                  .filter(Boolean)
                  .join(" ")
                  .trim();
              }

              const content: ContentMetadata = {};
              if (textContent) {
                content.text = textContent;
              }
              if (attributes.placeholder) {
                content.placeholder = attributes.placeholder;
              }
              if (attributes.className) {
                content.className = attributes.className;
              }

              const line = jsxNode.loc?.start?.line ?? 0;
              const col = jsxNode.loc?.start?.column ?? 0;
              const dataComponentId = `${relativePath}:${line}:${col}`;
              const fileName = path2.basename(id);

              if (shouldTagElement(elementName)) {
                const legacyIds = ` data-component-path="${relativePath}" data-component-line="${line}" data-component-file="${fileName}" data-component-name="${elementName}"`;

                magicString.appendLeft(
                  jsxNode.name?.end ?? 0,
                  ` data-archie-id="${dataComponentId}" data-archie-name="${elementName}" ${legacyIds}`
                );
                changedElementsCount++;
              }
            }
          },
        });

        stats.processedFiles++;
        stats.totalElements += changedElementsCount;

        return {
          code: magicString.toString(),
          map: magicString.generateMap({ hires: true }),
        };
      } catch (error) {
        console.error(`Error processing file ${relativePath}:`, error);
        stats.processedFiles++;
        return null;
      }
    },
  };
}
