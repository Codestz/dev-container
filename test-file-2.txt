import * as React from "react";
import { useNavigate } from "react-router-dom";

interface ElementData {
  id: string;
  name: string;
  path: string;
  line: number;
  file: string;
  lineStart: number;
  lineEnd: number;
  colStart: number;
  colEnd: number;
}

interface ElementMetrics {
  width: number;
  height: number;
  x: number;
  y: number;
}

const getElementMetrics = (element: HTMLElement): ElementMetrics => {
  const rect = element.getBoundingClientRect();
  return {
    width: Math.round(rect.width),
    height: Math.round(rect.height),
    x: Math.round(rect.left),
    y: Math.round(rect.top),
  };
};

const throttle = (func: Function, limit: number) => {
  let inThrottle: boolean;
  return function (this: any, ...args: any[]) {
    if (!inThrottle) {
      func.apply(this, args);
      inThrottle = true;
      setTimeout(() => (inThrottle = false), limit);
    }
  };
};

const showElementGuides = (element: HTMLElement) => {
  const metrics = getElementMetrics(element);
  const PADDING = 2; // Small padding in pixels
  const guide = document.createElement("div");
  guide.style.cssText = `
    position: fixed;
    border: 1px dashed rgba(100, 108, 255, 0.5);
    background: rgba(100, 108, 255, 0.1);
    pointer-events: none;
    z-index: 99998;
    width: ${metrics.width + PADDING * 2}px;
    height: ${metrics.height + PADDING * 2}px;
    left: ${metrics.x - PADDING}px;
    top: ${metrics.y - PADDING}px;
    border-radius: 4px;
  `;
  document.body.appendChild(guide);
  return guide;
};

export function InspectionHandler() {
  const navigate = useNavigate();
  const [isInspecting, setIsInspecting] = React.useState(false);
  const [selectedElement, setSelectedElement] =
    React.useState<HTMLElement | null>(null);
  const labelRef = React.useRef<HTMLDivElement>(null);
  const selectedGuideRef = React.useRef<HTMLDivElement | null>(null);
  const hoverGuideRef = React.useRef<HTMLDivElement | null>(null);
  const rafRef = React.useRef<number | null>(null);

  // Function to update guide position and size
  const updateGuidePosition = React.useCallback(
    (element: HTMLElement, guide: HTMLElement) => {
      const metrics = getElementMetrics(element);
      const PADDING = 2;
      guide.style.width = `${metrics.width + PADDING * 2}px`;
      guide.style.height = `${metrics.height + PADDING * 2}px`;
      guide.style.left = `${metrics.x - PADDING}px`;
      guide.style.top = `${metrics.y - PADDING}px`;
    },
    []
  );

  // Effect to handle dynamic updates of selected element
  React.useEffect(() => {
    if (!selectedElement || !selectedGuideRef.current) return;

    const updatePosition = () => {
      if (selectedElement && selectedGuideRef.current) {
        updateGuidePosition(selectedElement, selectedGuideRef.current);
      }
      rafRef.current = requestAnimationFrame(updatePosition);
    };

    // Start the animation frame loop
    rafRef.current = requestAnimationFrame(updatePosition);

    // Also update on scroll events
    const handleScroll = () => {
      if (selectedElement && selectedGuideRef.current) {
        updateGuidePosition(selectedElement, selectedGuideRef.current);
      }
    };

    // Listen for scroll events on window and all scrollable parents
    window.addEventListener("scroll", handleScroll, true);
    window.addEventListener("resize", handleScroll, true);

    // Cleanup function
    return () => {
      if (rafRef.current) {
        cancelAnimationFrame(rafRef.current);
      }
      window.removeEventListener("scroll", handleScroll, true);
      window.removeEventListener("resize", handleScroll, true);
    };
  }, [selectedElement, updateGuidePosition]);

  React.useEffect(() => {
    // Create label element for hover
    const label = document.createElement("div");
    label.style.position = "fixed";
    label.style.zIndex = "99999";
    label.style.background = "#646cff";
    label.style.color = "white";
    label.style.padding = "4px 8px";
    label.style.borderRadius = "4px";
    label.style.fontSize = "12px";
    label.style.pointerEvents = "none";
    label.style.display = "none";
    label.style.fontWeight = "500";
    label.style.boxShadow = "0 2px 6px rgba(0,0,0,0.3)";
    label.style.transition = "transform 0.1s ease-out";
    document.body.appendChild(label);

    // @ts-expect-error - current is read-only
    labelRef.current = label;

    return () => {
      document.body.removeChild(label);
    };
  }, []);

  React.useEffect(() => {
    // Listen for messages from parent window to start/stop inspection
    const handleMessage = (event: MessageEvent) => {
      if (event.data.type === "TOGGLE_INSPECTION") {
        setIsInspecting(event.data.enabled);
        // Clear selection when toggling inspection
        if (!event.data.enabled) {
          clearSelection();
        }
      } else if (event.data.type === "CLEAR_SELECTION") {
        clearSelection();
      } else if (event.data.type === "NAVIGATION_ACTION") {
        if (event.data.action === "back") {
          navigate(-1);
        } else if (event.data.action === "forward") {
          navigate(1);
        } else if (event.data.action === "navigate") {
          navigate(event.data.url);
        } else if (event.data.action === "reload") {
          setSelectedElement(null);
          navigate(0);
        }

        window.parent.postMessage(
          {
            type: "NAVIGATION_STATE",
            data: {
              canGoBack: window.history.state.idx !== 0,
              canGoForward:
                window.history.state.idx < window.history.length - 1,
              currentPath: window.location.pathname,
            },
          },
          "*"
        );
      } else if (event.data.type === "REQUEST_CURRENT_URL") {
      }
    };

    window.addEventListener("message", handleMessage);
    return () => window.removeEventListener("message", handleMessage);
  }, []);

  const clearSelection = React.useCallback(() => {
    if (selectedElement) {
      setSelectedElement(null);
    }
    // Clear selected guide when selection is cleared
    if (selectedGuideRef.current) {
      document.body.removeChild(selectedGuideRef.current);
      selectedGuideRef.current = null;
    }
  }, [selectedElement]);

  const handleElementClick = React.useCallback(
    (element: HTMLElement, event: MouseEvent) => {
      // Always prevent default and stop propagation
      event.preventDefault();
      event.stopPropagation();

      // Clear previous selection and guide
      clearSelection();

      // Set new selection
      setSelectedElement(element);

      // Show guide for selected element with different style for selected state
      const guide = document.createElement("div");
      const metrics = getElementMetrics(element);
      const PADDING = 2;
      guide.style.cssText = `
        position: fixed;
        border: 2px solid #646cff;
        background: rgba(100, 108, 255, 0.1);
        pointer-events: none;
        z-index: 99998;
        width: ${metrics.width + PADDING * 2}px;
        height: ${metrics.height + PADDING * 2}px;
        left: ${metrics.x - PADDING}px;
        top: ${metrics.y - PADDING}px;
        border-radius: 4px;
        transition: all 0.2s ease-out;
      `;
      document.body.appendChild(guide);
      selectedGuideRef.current = guide;

      // Extract and send data
      const elementData: ElementData = {
        id: element.getAttribute("data-archie-id") || "",
        name: element.getAttribute("data-archie-name") || "",
        path: element.getAttribute("data-component-path") || "",
        line: parseInt(element.getAttribute("data-component-line") || "0", 10),
        file: element.getAttribute("data-component-file") || "",
        lineStart: parseInt(element.getAttribute("data-line-start") || "0", 10),
        lineEnd: parseInt(element.getAttribute("data-line-end") || "0", 10),
        colStart: parseInt(element.getAttribute("data-col-start") || "0", 10),
        colEnd: parseInt(element.getAttribute("data-col-end") || "0", 10),
      };

      // Include metrics in message to parent
      window.parent.postMessage(
        {
          type: "ELEMENT_SELECTED",
          data: {
            ...elementData,
            metrics,
          },
        },
        "*"
      );

      // If it's an interactive element, trigger its click after a small delay
      const isInteractive = element.matches(
        'button, [role="button"], a, input, select, textarea, [tabindex], [contenteditable="true"], details, summary'
      );

      if (isInteractive) {
        setTimeout(() => {
          element.click();
        }, 0);
      }
    },
    [clearSelection]
  );

  React.useEffect(() => {
    if (!isInspecting) {
      clearSelection();
      if (labelRef.current) {
        labelRef.current.style.display = "none";
      }
      // Clear hover guide
      if (hoverGuideRef.current) {
        document.body.removeChild(hoverGuideRef.current);
        hoverGuideRef.current = null;
      }
      return;
    }

    const handleMouseOver = (event: MouseEvent) => {
      const target = event.target as HTMLElement;
      const inspectableElement = target.closest(
        "[data-archie-id]"
      ) as HTMLElement;

      if (!inspectableElement || inspectableElement === selectedElement) return;

      // Show guide for hovered element
      if (hoverGuideRef.current) {
        document.body.removeChild(hoverGuideRef.current);
      }
      hoverGuideRef.current = showElementGuides(inspectableElement);

      // Update hover label
      if (labelRef.current) {
        const name = inspectableElement.getAttribute("data-archie-name") || "";
        const metrics = getElementMetrics(inspectableElement);

        // Clear previous content
        labelRef.current.innerHTML = "";

        // Add name and metrics
        const nameElement = document.createElement("div");
        nameElement.textContent = `${name} - ${metrics.width}x${metrics.height}`;
        nameElement.style.fontWeight = "600";

        labelRef.current.appendChild(nameElement);

        labelRef.current.style.display = "block";

        // Position relative to the element
        const rect = inspectableElement.getBoundingClientRect();
        labelRef.current.style.position = "fixed";
        labelRef.current.style.top = `${rect.top - 22}px`;
        labelRef.current.style.left = `${rect.left - 2}px`;
      }

      // Send hover data
      const elementData: ElementData = {
        id: inspectableElement.getAttribute("data-archie-id") || "",
        name: inspectableElement.getAttribute("data-archie-name") || "",
        path: inspectableElement.getAttribute("data-component-path") || "",
        line: parseInt(
          inspectableElement.getAttribute("data-component-line") || "0",
          10
        ),
        file: inspectableElement.getAttribute("data-component-file") || "",
        lineStart: parseInt(
          inspectableElement.getAttribute("data-line-start") || "0",
          10
        ),
        lineEnd: parseInt(
          inspectableElement.getAttribute("data-line-end") || "0",
          10
        ),
        colStart: parseInt(
          inspectableElement.getAttribute("data-col-start") || "0",
          10
        ),
        colEnd: parseInt(
          inspectableElement.getAttribute("data-col-end") || "0",
          10
        ),
      };

      const metrics = getElementMetrics(inspectableElement);
      window.parent.postMessage(
        {
          type: "ELEMENT_INSPECTED",
          data: {
            ...elementData,
            metrics,
          },
        },
        "*"
      );
    };

    const handleMouseOut = (event: MouseEvent) => {
      const target = event.target as HTMLElement;
      const inspectableElement = target.closest(
        "[data-archie-id]"
      ) as HTMLElement;

      if (inspectableElement && inspectableElement !== selectedElement) {
        // Remove hover guide only
        if (hoverGuideRef.current) {
          document.body.removeChild(hoverGuideRef.current);
          hoverGuideRef.current = null;
        }
      }

      // Hide label
      if (labelRef.current) {
        labelRef.current.style.display = "none";
      }
    };

    const handleMouseMove = (event: MouseEvent) => {
      if (labelRef.current && labelRef.current.style.display === "block") {
        labelRef.current.style.left = `${event.clientX + 10}px`;
        labelRef.current.style.top = `${event.clientY + 10}px`;
      }
    };

    // Create throttled version inside the effect where handleMouseMove is defined
    const throttledMouseMove = throttle(handleMouseMove, 16);

    const handleClick = (event: MouseEvent) => {
      const target = event.target as HTMLElement;
      const inspectableElement = target.closest(
        "[data-archie-id]"
      ) as HTMLElement;

      if (inspectableElement) {
        handleElementClick(inspectableElement, event);
      }
    };

    document.addEventListener("mouseover", handleMouseOver);
    document.addEventListener("mouseout", handleMouseOut);
    document.addEventListener("mousemove", throttledMouseMove);
    document.addEventListener("pointerdown", handleClick, true);

    return () => {
      // Cleanup hover guide only on effect cleanup
      if (hoverGuideRef.current) {
        document.body.removeChild(hoverGuideRef.current);
        hoverGuideRef.current = null;
      }
      document.removeEventListener("mouseover", handleMouseOver);
      document.removeEventListener("mouseout", handleMouseOut);
      document.removeEventListener("mousemove", throttledMouseMove);
      document.removeEventListener("pointerdown", handleClick, true);
    };
  }, [isInspecting, selectedElement, handleElementClick, clearSelection]);

  // Notify parent when inspection starts to handle focus
  React.useEffect(() => {
    if (isInspecting) {
      // Tell parent window that inspection is active so it can focus the iframe if needed
      window.parent.postMessage({ type: "INSPECTION_ACTIVE" }, "*");
    }
  }, [isInspecting]);

  // Cleanup all observers and guides when component unmounts
  React.useEffect(() => {
    const handlePopState = () => {
      // Clear guides immediately before navigation
      if (selectedGuideRef.current) {
        document.body.removeChild(selectedGuideRef.current);
        selectedGuideRef.current = null;
      }
      if (hoverGuideRef.current) {
        document.body.removeChild(hoverGuideRef.current);
        hoverGuideRef.current = null;
      }
      if (labelRef.current) {
        labelRef.current.style.display = "none";
      }

      window.parent.postMessage(
        {
          type: "URL_CHANGED",
          path: window.location.pathname,
        },
        "*"
      );

      // Send updated navigation state
      window.parent.postMessage(
        {
          type: "NAVIGATION_STATE",
          canGoBack: window.history.state.idx !== 0,
          canGoForward: window.history.state.idx < window.history.length - 1,
          currentPath: window.location.pathname,
        },
        "*"
      );
    };

    window.addEventListener("popstate", handlePopState);

    // Initial URL notification
    window.parent.postMessage(
      {
        type: "URL_CHANGED",
        path: window.location.pathname,
      },
      "*"
    );

    return () => {
      window.removeEventListener("popstate", handlePopState);
      // Ensure cleanup of guides
      if (selectedGuideRef.current) {
        document.body.removeChild(selectedGuideRef.current);
        selectedGuideRef.current = null;
      }
      if (hoverGuideRef.current) {
        document.body.removeChild(hoverGuideRef.current);
        hoverGuideRef.current = null;
      }
    };
  }, []);

  return null;
}
